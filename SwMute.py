#
#     8888888888P       888b    888          888
#           d88P        8888b   888          888
#          d88P         88888b  888          888
#         d88P          888Y88b 888  .d88b.  888888
#        d88P           888 Y88b888 d8P  Y8b 888
#       d88P     888888 888  Y88888 88888888 888
#      d88P             888   Y8888 Y8b.     Y88b.
#     d8888888888       888    Y888  "Y8888   "Y888
#
#                  https://z-net.xyz
#
#             Licensed under the GNU GPLv3
#      https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://st3.depositphotos.com/1472772/17102/i/450/depositphotos_171023276-stock-photo-zipped-mouth-emoji-isolated-on.jpg?forcejpeg=true
# meta desc: SwMute
# meta developer: @reverserave

# scope: hikka_only


import logging
from telethon import types
from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class SwMuteMod(loader.Module):
    """ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–∫—Ä—ã—Ç—å —Ä–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ü–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –º—É—Ç - –º–æ–¥—É–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∂–µ—Ä—Ç–≤—ã.
    –í –≥—Ä—É–ø–ø–∞—Ö —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π!"""

    strings = {
        "name": "SwMute",
        "now_in_mute": "{} <b><a href='tg://user?id={}'>{}</a>, now you're muted.</b>",
        "alredy_now_in_mute": "{} <b>{} already muted.</b>",
        "now_not_in_mute": "{} <b><a href='tg://user?id={}'>{}</a>, now you're not muted.</b>",
        "alredy_not_in_mute": "{} <b>{} was not muted.</b>",
        "args_error": "{} <b>User <code>{}</code> not found.</b>",
        "muted_users_list": "üìá <b>Here is the list of muted users:</b>\n{}",
        "muted_users_list_empty": "üìá <b>The list of users in the mute is empty</b>",
        "_mute_emoji": "üö´",
        "_unmute_emoji": "‚òëÔ∏è",
        "_info_emoji": "‚ÑπÔ∏è"
    }

    strings_ru = {
        "now_in_mute": "{} <b><a href='tg://user?id={}'>{}</a>, —Ç–µ–ø–µ—Ä—å —Ç—ã –≤ –º—É—Ç–µ.</b>",
        "alredy_now_in_mute": "{} <b>{} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ.</b>",
        "now_not_in_mute": "{} <b><a href='tg://user?id={}'>{}</a>, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –≤ –º—É—Ç–µ.</b>",
        "alredy_not_in_mute": "{} <b>{} –Ω–µ –±—ã–ª –≤ –º—É—Ç–µ.</b>",
        "args_error": "{} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
        "muted_users_list": "üìá <b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ:</b>\n{}",
        "muted_users_list_empty": "üìá <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ –ø—É—Å—Ç.</b>",
        "_mute_emoji": "üö´",
        "_unmute_emoji": "‚òëÔ∏è",
        "_info_emoji": "‚ÑπÔ∏è"
    }

    def __init__(self) -> None:
        self.config = loader.ModuleConfig(
            "custom_mute_emoji", "üö´", lambda: self.strings("_mute_emoji"),
            "custom_unmute_emoji", "‚òëÔ∏è", lambda: self.strings("_unmute_emoji"),
            "custom_info_emoji", "‚ÑπÔ∏è", lambda: self.strings("_info_emoji")
        )

    async def client_ready(self, client, db) -> None:
        self.db = db
        self.client = client
        self.muted_users = self.db.get("swmute", "muted_users", [])

    async def _get_entity(self, message: types.Message):
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        entity = None
        if reply and not args:
            entity = await self.client.get_entity(reply.sender_id)
        if args and not reply:
            args = args.split()
            if args[0].isnumeric():
                args[0] = int(args[0])
            try:
                entity = await self.client.get_entity(args[0])
            except (ValueError, AttributeError):
                await utils.answer(message, self.strings['args_error'].format(
                    self.config["custom_info_emoji"], args[0]))
        return entity

    async def swmutecmd(self, message: types.Message) -> None:
        """ swmute <@ –∏–ª–∏ —Ä–µ–ø–ª–∞–π> - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        entity = await self._get_entity(message)
        if entity and entity.id not in self.muted_users:
            self.muted_users.append(entity.id)
            self.db.set("swmute", "muted_users", self.muted_users)
            await utils.answer(message, self.strings['now_in_mute'].format(
                self.config['custom_mute_emoji'], entity.id, entity.first_name))
        elif entity and entity.id in self.muted_users:
            await utils.answer(message, self.strings['alredy_now_in_mute'].format(
                self.config['custom_mute_emoji'], entity.first_name))

    async def swunmutecmd(self, message: types.Message) -> None:
        """ swunmute <@ –∏–ª–∏ —Ä–µ–ø–ª–∞–π> - —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        entity = await self._get_entity(message)
        if entity and entity.id in self.muted_users:
            self.muted_users.remove(entity.id)
            self.db.set("swmute", "muted_users", self.muted_users)
            await utils.answer(message, self.strings['now_not_in_mute'].format(
                self.config['custom_unmute_emoji'], entity.id, entity.first_name))
        elif entity and entity.id not in self.muted_users:
            await utils.answer(message, self.strings['alredy_not_in_mute'].format(
                self.config['custom_unmute_emoji'], entity.first_name))

    async def swlistcmd(self, message: types.Message) -> None:
        """ swlist - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ """
        if not self.muted_users:
            await utils.answer(message, self.strings['muted_users_list_empty'])
            return
        users = []
        for i in range(len(self.muted_users)):
            entity = await self.client.get_entity(self.muted_users[i])
            users.append("<b>{}.</b> <a href='tg://user?id={}'>{}</a> ({})".format(
                i+1, entity.id, entity.first_name, entity.id))
        await utils.answer(message, self.strings['muted_users_list'].format("\n".join(users)))

    async def watcher(self, message: types.Message) -> None:
        if message.from_id in self.muted_users:
            try:
                await message.delete()
            except Exception as err:
                logger.error(err)
